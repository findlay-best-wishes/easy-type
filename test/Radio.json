{
	"id": 0,
	"name": "@mui/material",
	"kind": 1,
	"kindString": "Project",
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 304,
			"name": "RadioClasses",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 306,
					"name": "checked",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "State class applied to the root element if "
							},
							{
								"kind": "code",
								"text": "`checked={true}`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/Radio/radioClasses.ts",
							"line": 7,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/Radio/radioClasses.ts#L7"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 308,
					"name": "colorPrimary",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Styles applied to the root element if "
							},
							{
								"kind": "code",
								"text": "`color=\"primary\"`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/Radio/radioClasses.ts",
							"line": 11,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/Radio/radioClasses.ts#L11"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 309,
					"name": "colorSecondary",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Styles applied to the root element if "
							},
							{
								"kind": "code",
								"text": "`color=\"secondary\"`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/Radio/radioClasses.ts",
							"line": 13,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/Radio/radioClasses.ts#L13"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 307,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "State class applied to the root element if "
							},
							{
								"kind": "code",
								"text": "`disabled={true}`"
							},
							{
								"kind": "text",
								"text": "."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/Radio/radioClasses.ts",
							"line": 9,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/Radio/radioClasses.ts#L9"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 305,
					"name": "root",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Styles applied to the root element."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/Radio/radioClasses.ts",
							"line": 5,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/Radio/radioClasses.ts#L5"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						306,
						308,
						309,
						307,
						305
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/mui-material/src/Radio/radioClasses.ts",
					"line": 3,
					"character": 17,
					"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/Radio/radioClasses.ts#L3"
				}
			]
		},
		{
			"id": 4,
			"name": "RadioProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 295,
					"name": "LinkComponent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The component used to render a link when the "
							},
							{
								"kind": "code",
								"text": "`href`"
							},
							{
								"kind": "text",
								"text": " prop is provided."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "'a'"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/ButtonBase/ButtonBase.d.ts",
							"line": 65,
							"character": 4,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/ButtonBase/ButtonBase.d.ts#L65"
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "ElementType",
						"qualifiedName": "React.ElementType",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.LinkComponent"
					}
				},
				{
					"id": 296,
					"name": "TouchRippleProps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Props applied to the "
							},
							{
								"kind": "code",
								"text": "`TouchRipple`"
							},
							{
								"kind": "text",
								"text": " element."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/ButtonBase/ButtonBase.d.ts",
							"line": 82,
							"character": 4,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/ButtonBase/ButtonBase.d.ts#L82"
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "TouchRippleProps"
							}
						],
						"name": "Partial",
						"qualifiedName": "Partial",
						"package": "typescript"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.TouchRippleProps"
					}
				},
				{
					"id": 53,
					"name": "about",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1875,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.about"
					}
				},
				{
					"id": 25,
					"name": "accessKey",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1851,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.accessKey"
					}
				},
				{
					"id": 24,
					"name": "action",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A ref for imperative actions.\nIt currently only supports "
							},
							{
								"kind": "code",
								"text": "`focusVisible()`"
							},
							{
								"kind": "text",
								"text": " action."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/ButtonBase/ButtonBase.d.ts",
							"line": 14,
							"character": 4,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/ButtonBase/ButtonBase.d.ts#L14"
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "ButtonBaseActions"
							}
						],
						"name": "Ref",
						"qualifiedName": "React.Ref",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.action"
					}
				},
				{
					"id": 72,
					"name": "aria-activedescendant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1585,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-activedescendant"
					}
				},
				{
					"id": 73,
					"name": "aria-atomic",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1587,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "Booleanish",
						"qualifiedName": "Booleanish",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-atomic"
					}
				},
				{
					"id": 74,
					"name": "aria-autocomplete",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1592,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "inline"
							},
							{
								"type": "literal",
								"value": "both"
							},
							{
								"type": "literal",
								"value": "none"
							},
							{
								"type": "literal",
								"value": "list"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-autocomplete"
					}
				},
				{
					"id": 75,
					"name": "aria-busy",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1594,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "Booleanish",
						"qualifiedName": "Booleanish",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-busy"
					}
				},
				{
					"id": 76,
					"name": "aria-checked",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": " - "
									},
									{
										"kind": "text",
										"text": "aria-pressed"
									},
									{
										"kind": "text",
										"text": "\n"
									},
									{
										"kind": "text",
										"text": " - "
									},
									{
										"kind": "text",
										"text": "aria-selected."
									},
									{
										"kind": "text",
										"text": "\n"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1599,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "boolean"
							},
							{
								"type": "literal",
								"value": "false"
							},
							{
								"type": "literal",
								"value": "mixed"
							},
							{
								"type": "literal",
								"value": "true"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-checked"
					}
				},
				{
					"id": 77,
					"name": "aria-colcount",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines the total number of columns in a table, grid, or treegrid."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "aria-colindex."
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1604,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-colcount"
					}
				},
				{
					"id": 78,
					"name": "aria-colindex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": " - "
									},
									{
										"kind": "text",
										"text": "aria-colcount"
									},
									{
										"kind": "text",
										"text": "\n"
									},
									{
										"kind": "text",
										"text": " - "
									},
									{
										"kind": "text",
										"text": "aria-colspan."
									},
									{
										"kind": "text",
										"text": "\n"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1609,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-colindex"
					}
				},
				{
					"id": 79,
					"name": "aria-colspan",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": " - "
									},
									{
										"kind": "text",
										"text": "aria-colindex"
									},
									{
										"kind": "text",
										"text": "\n"
									},
									{
										"kind": "text",
										"text": " - "
									},
									{
										"kind": "text",
										"text": "aria-rowspan."
									},
									{
										"kind": "text",
										"text": "\n"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1614,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-colspan"
					}
				},
				{
					"id": 80,
					"name": "aria-controls",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Identifies the element (or elements) whose contents or presence are controlled by the current element."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "aria-owns."
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1619,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-controls"
					}
				},
				{
					"id": 81,
					"name": "aria-current",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates the element that represents the current item within a container or set of related elements."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1621,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "boolean"
							},
							{
								"type": "literal",
								"value": "location"
							},
							{
								"type": "literal",
								"value": "time"
							},
							{
								"type": "literal",
								"value": "false"
							},
							{
								"type": "literal",
								"value": "page"
							},
							{
								"type": "literal",
								"value": "true"
							},
							{
								"type": "literal",
								"value": "step"
							},
							{
								"type": "literal",
								"value": "date"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-current"
					}
				},
				{
					"id": 82,
					"name": "aria-describedby",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Identifies the element (or elements) that describes the object."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "aria-labelledby"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1626,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-describedby"
					}
				},
				{
					"id": 83,
					"name": "aria-details",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Identifies the element that provides a detailed, extended description for the object."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "aria-describedby."
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1631,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-details"
					}
				},
				{
					"id": 84,
					"name": "aria-disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": " - "
									},
									{
										"kind": "text",
										"text": "aria-hidden"
									},
									{
										"kind": "text",
										"text": "\n"
									},
									{
										"kind": "text",
										"text": " - "
									},
									{
										"kind": "text",
										"text": "aria-readonly."
									},
									{
										"kind": "text",
										"text": "\n"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1636,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "Booleanish",
						"qualifiedName": "Booleanish",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-disabled"
					}
				},
				{
					"id": 85,
					"name": "aria-dropeffect",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates what functions can be performed when a dragged object is released on the drop target."
							}
						],
						"blockTags": [
							{
								"tag": "@deprecated",
								"content": [
									{
										"kind": "text",
										"text": "in ARIA 1.1"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1641,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "link"
							},
							{
								"type": "literal",
								"value": "none"
							},
							{
								"type": "literal",
								"value": "copy"
							},
							{
								"type": "literal",
								"value": "move"
							},
							{
								"type": "literal",
								"value": "execute"
							},
							{
								"type": "literal",
								"value": "popup"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-dropeffect"
					}
				},
				{
					"id": 86,
					"name": "aria-errormessage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Identifies the element that provides an error message for the object."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": " - "
									},
									{
										"kind": "text",
										"text": "aria-invalid"
									},
									{
										"kind": "text",
										"text": "\n"
									},
									{
										"kind": "text",
										"text": " - "
									},
									{
										"kind": "text",
										"text": "aria-describedby."
									},
									{
										"kind": "text",
										"text": "\n"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1646,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-errormessage"
					}
				},
				{
					"id": 87,
					"name": "aria-expanded",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1648,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "Booleanish",
						"qualifiedName": "Booleanish",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-expanded"
					}
				},
				{
					"id": 88,
					"name": "aria-flowto",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1653,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-flowto"
					}
				},
				{
					"id": 89,
					"name": "aria-grabbed",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates an element's \"grabbed\" state in a drag-and-drop operation."
							}
						],
						"blockTags": [
							{
								"tag": "@deprecated",
								"content": [
									{
										"kind": "text",
										"text": "in ARIA 1.1"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1658,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "Booleanish",
						"qualifiedName": "Booleanish",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-grabbed"
					}
				},
				{
					"id": 90,
					"name": "aria-haspopup",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1660,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "boolean"
							},
							{
								"type": "literal",
								"value": "grid"
							},
							{
								"type": "literal",
								"value": "dialog"
							},
							{
								"type": "literal",
								"value": "menu"
							},
							{
								"type": "literal",
								"value": "false"
							},
							{
								"type": "literal",
								"value": "listbox"
							},
							{
								"type": "literal",
								"value": "true"
							},
							{
								"type": "literal",
								"value": "tree"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-haspopup"
					}
				},
				{
					"id": 91,
					"name": "aria-hidden",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates whether the element is exposed to an accessibility API."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "aria-disabled."
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1665,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "Booleanish",
						"qualifiedName": "Booleanish",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-hidden"
					}
				},
				{
					"id": 92,
					"name": "aria-invalid",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates the entered value does not conform to the format expected by the application."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "aria-errormessage."
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1670,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "boolean"
							},
							{
								"type": "literal",
								"value": "false"
							},
							{
								"type": "literal",
								"value": "true"
							},
							{
								"type": "literal",
								"value": "grammar"
							},
							{
								"type": "literal",
								"value": "spelling"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-invalid"
					}
				},
				{
					"id": 93,
					"name": "aria-keyshortcuts",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1672,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-keyshortcuts"
					}
				},
				{
					"id": 94,
					"name": "aria-label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines a string value that labels the current element."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "aria-labelledby."
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1677,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-label"
					}
				},
				{
					"id": 95,
					"name": "aria-labelledby",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Identifies the element (or elements) that labels the current element."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "aria-describedby."
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1682,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-labelledby"
					}
				},
				{
					"id": 96,
					"name": "aria-level",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines the hierarchical level of an element within a structure."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1684,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-level"
					}
				},
				{
					"id": 97,
					"name": "aria-live",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1686,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "off"
							},
							{
								"type": "literal",
								"value": "assertive"
							},
							{
								"type": "literal",
								"value": "polite"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-live"
					}
				},
				{
					"id": 98,
					"name": "aria-modal",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates whether an element is modal when displayed."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1688,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "Booleanish",
						"qualifiedName": "Booleanish",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-modal"
					}
				},
				{
					"id": 99,
					"name": "aria-multiline",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates whether a text box accepts multiple lines of input or only a single line."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1690,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "Booleanish",
						"qualifiedName": "Booleanish",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-multiline"
					}
				},
				{
					"id": 100,
					"name": "aria-multiselectable",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates that the user may select more than one item from the current selectable descendants."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1692,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "Booleanish",
						"qualifiedName": "Booleanish",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-multiselectable"
					}
				},
				{
					"id": 101,
					"name": "aria-orientation",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1694,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "horizontal"
							},
							{
								"type": "literal",
								"value": "vertical"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-orientation"
					}
				},
				{
					"id": 102,
					"name": "aria-owns",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "aria-controls."
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1700,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-owns"
					}
				},
				{
					"id": 103,
					"name": "aria-placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1705,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-placeholder"
					}
				},
				{
					"id": 104,
					"name": "aria-posinset",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "aria-setsize."
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1710,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-posinset"
					}
				},
				{
					"id": 105,
					"name": "aria-pressed",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates the current \"pressed\" state of toggle buttons."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": " - "
									},
									{
										"kind": "text",
										"text": "aria-checked"
									},
									{
										"kind": "text",
										"text": "\n"
									},
									{
										"kind": "text",
										"text": " - "
									},
									{
										"kind": "text",
										"text": "aria-selected."
									},
									{
										"kind": "text",
										"text": "\n"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1715,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "boolean"
							},
							{
								"type": "literal",
								"value": "false"
							},
							{
								"type": "literal",
								"value": "mixed"
							},
							{
								"type": "literal",
								"value": "true"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-pressed"
					}
				},
				{
					"id": 106,
					"name": "aria-readonly",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates that the element is not editable, but is otherwise operable."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "aria-disabled."
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1720,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "Booleanish",
						"qualifiedName": "Booleanish",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-readonly"
					}
				},
				{
					"id": 107,
					"name": "aria-relevant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "aria-atomic."
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1725,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "all"
							},
							{
								"type": "literal",
								"value": "text"
							},
							{
								"type": "literal",
								"value": "additions"
							},
							{
								"type": "literal",
								"value": "additions removals"
							},
							{
								"type": "literal",
								"value": "additions text"
							},
							{
								"type": "literal",
								"value": "removals"
							},
							{
								"type": "literal",
								"value": "removals additions"
							},
							{
								"type": "literal",
								"value": "removals text"
							},
							{
								"type": "literal",
								"value": "text additions"
							},
							{
								"type": "literal",
								"value": "text removals"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-relevant"
					}
				},
				{
					"id": 108,
					"name": "aria-required",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates that user input is required on the element before a form may be submitted."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1727,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "Booleanish",
						"qualifiedName": "Booleanish",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-required"
					}
				},
				{
					"id": 109,
					"name": "aria-roledescription",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines a human-readable, author-localized description for the role of an element."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1729,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-roledescription"
					}
				},
				{
					"id": 110,
					"name": "aria-rowcount",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines the total number of rows in a table, grid, or treegrid."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "aria-rowindex."
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1734,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-rowcount"
					}
				},
				{
					"id": 111,
					"name": "aria-rowindex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": " - "
									},
									{
										"kind": "text",
										"text": "aria-rowcount"
									},
									{
										"kind": "text",
										"text": "\n"
									},
									{
										"kind": "text",
										"text": " - "
									},
									{
										"kind": "text",
										"text": "aria-rowspan."
									},
									{
										"kind": "text",
										"text": "\n"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1739,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-rowindex"
					}
				},
				{
					"id": 112,
					"name": "aria-rowspan",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": " - "
									},
									{
										"kind": "text",
										"text": "aria-rowindex"
									},
									{
										"kind": "text",
										"text": "\n"
									},
									{
										"kind": "text",
										"text": " - "
									},
									{
										"kind": "text",
										"text": "aria-colspan."
									},
									{
										"kind": "text",
										"text": "\n"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1744,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-rowspan"
					}
				},
				{
					"id": 113,
					"name": "aria-selected",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates the current \"selected\" state of various widgets."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": " - "
									},
									{
										"kind": "text",
										"text": "aria-checked"
									},
									{
										"kind": "text",
										"text": "\n"
									},
									{
										"kind": "text",
										"text": " - "
									},
									{
										"kind": "text",
										"text": "aria-pressed."
									},
									{
										"kind": "text",
										"text": "\n"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1749,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "Booleanish",
						"qualifiedName": "Booleanish",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-selected"
					}
				},
				{
					"id": 114,
					"name": "aria-setsize",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "aria-posinset."
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1754,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-setsize"
					}
				},
				{
					"id": 115,
					"name": "aria-sort",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Indicates if items in a table or grid are sorted in ascending or descending order."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1756,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "none"
							},
							{
								"type": "literal",
								"value": "other"
							},
							{
								"type": "literal",
								"value": "ascending"
							},
							{
								"type": "literal",
								"value": "descending"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-sort"
					}
				},
				{
					"id": 116,
					"name": "aria-valuemax",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines the maximum allowed value for a range widget."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1758,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-valuemax"
					}
				},
				{
					"id": 117,
					"name": "aria-valuemin",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines the minimum allowed value for a range widget."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1760,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-valuemin"
					}
				},
				{
					"id": 118,
					"name": "aria-valuenow",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines the current value for a range widget."
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "aria-valuetext."
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1765,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-valuenow"
					}
				},
				{
					"id": 119,
					"name": "aria-valuetext",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Defines the human readable text alternative of aria-valuenow for a range widget."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1767,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.aria-valuetext"
					}
				},
				{
					"id": 60,
					"name": "autoCapitalize",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1885,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.autoCapitalize"
					}
				},
				{
					"id": 61,
					"name": "autoCorrect",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1886,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.autoCorrect"
					}
				},
				{
					"id": 37,
					"name": "autoFocus",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/internal/SwitchBase.d.ts",
							"line": 8,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/internal/SwitchBase.d.ts#L8"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.autoFocus"
					}
				},
				{
					"id": 62,
					"name": "autoSave",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1887,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.autoSave"
					}
				},
				{
					"id": 290,
					"name": "centerRipple",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": ", the ripples are centered.\nThey won't start at the cursor interaction position."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/ButtonBase/ButtonBase.d.ts",
							"line": 20,
							"character": 4,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/ButtonBase/ButtonBase.d.ts#L20"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.centerRipple"
					}
				},
				{
					"id": 38,
					"name": "checked",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": ", the component is checked."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/internal/SwitchBase.d.ts",
							"line": 12,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/internal/SwitchBase.d.ts#L12"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.checked"
					}
				},
				{
					"id": 5,
					"name": "checkedIcon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The icon to display when the component is checked."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "<RadioButtonIcon checked />"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/Radio/Radio.d.ts",
							"line": 18,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/Radio/Radio.d.ts#L18"
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode",
						"qualifiedName": "React.ReactNode",
						"package": "@types/react"
					}
				},
				{
					"id": 28,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/OverridableComponent.d.ts",
							"line": 60,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/OverridableComponent.d.ts#L60"
						},
						{
							"fileName": "packages/mui-material/src/index.d.ts",
							"line": 40,
							"character": 4,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/index.d.ts#L40"
						},
						{
							"fileName": "packages/mui-material/src/index.d.ts",
							"line": 40,
							"character": 4,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/index.d.ts#L40"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.className"
					}
				},
				{
					"id": 6,
					"name": "classes",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Override or extend the styles applied to the component."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/Radio/Radio.d.ts",
							"line": 22,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/Radio/Radio.d.ts#L22"
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 304,
								"name": "RadioClasses"
							}
						],
						"name": "Partial",
						"qualifiedName": "Partial",
						"package": "typescript"
					},
					"overwrites": {
						"type": "reference",
						"name": "StandardProps.classes"
					}
				},
				{
					"id": 7,
					"name": "color",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The color of the component.\nIt supports both default and custom theme colors, which can be added as shown in the\n[palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors)."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "'primary'"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/Radio/Radio.d.ts",
							"line": 29,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/Radio/Radio.d.ts#L29"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "error"
							},
							{
								"type": "literal",
								"value": "default"
							},
							{
								"type": "literal",
								"value": "success"
							},
							{
								"type": "literal",
								"value": "info"
							},
							{
								"type": "literal",
								"value": "warning"
							},
							{
								"type": "literal",
								"value": "primary"
							},
							{
								"type": "literal",
								"value": "secondary"
							}
						]
					}
				},
				{
					"id": 30,
					"name": "contentEditable",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1853,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "inherit"
							},
							{
								"type": "reference",
								"name": "Booleanish",
								"qualifiedName": "Booleanish",
								"package": "@types/react"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.contentEditable"
					}
				},
				{
					"id": 48,
					"name": "contextMenu",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1854,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.contextMenu"
					}
				},
				{
					"id": 121,
					"name": "dangerouslySetInnerHTML",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1374,
							"character": 8
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 122,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 123,
									"name": "__html",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/react/index.d.ts",
											"line": 1375,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"children": [
										123
									]
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 1374,
									"character": 34
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.dangerouslySetInnerHTML"
					}
				},
				{
					"id": 54,
					"name": "datatype",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1876,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.datatype"
					}
				},
				{
					"id": 44,
					"name": "defaultChecked",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The default checked state. Use when the component is not controlled."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/internal/SwitchBase.d.ts",
							"line": 21,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/internal/SwitchBase.d.ts#L21"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.defaultChecked"
					}
				},
				{
					"id": 45,
					"name": "defaultValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1846,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.defaultValue"
					}
				},
				{
					"id": 23,
					"name": "dir",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1855,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.dir"
					}
				},
				{
					"id": 298,
					"name": "disableFocusRipple",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": ", the  keyboard focus ripple is disabled."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/internal/SwitchBase.d.ts",
							"line": 31,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/internal/SwitchBase.d.ts#L31"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.disableFocusRipple"
					}
				},
				{
					"id": 291,
					"name": "disableRipple",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": ", the ripple effect is disabled."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/internal/SwitchBase.d.ts",
							"line": 26,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/internal/SwitchBase.d.ts#L26"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.disableRipple"
					}
				},
				{
					"id": 292,
					"name": "disableTouchRipple",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": ", the touch ripple effect is disabled."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/ButtonBase/ButtonBase.d.ts",
							"line": 46,
							"character": 4,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/ButtonBase/ButtonBase.d.ts#L46"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.disableTouchRipple"
					}
				},
				{
					"id": 8,
					"name": "disabled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": ", the component is disabled."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/Radio/Radio.d.ts",
							"line": 36,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/Radio/Radio.d.ts#L36"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"overwrites": {
						"type": "reference",
						"name": "StandardProps.disabled"
					}
				},
				{
					"id": 26,
					"name": "draggable",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1856,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "Booleanish",
						"qualifiedName": "Booleanish",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.draggable"
					}
				},
				{
					"id": 299,
					"name": "edge",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If given, uses a negative margin to counteract the padding on one\nside (this is often helpful for aligning the left or right\nside of the icon with content above or below, without ruining the border\nsize and shape)."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/internal/SwitchBase.d.ts",
							"line": 39,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/internal/SwitchBase.d.ts#L39"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": false
							},
							{
								"type": "literal",
								"value": "end"
							},
							{
								"type": "literal",
								"value": "start"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.edge"
					}
				},
				{
					"id": 293,
					"name": "focusRipple",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": ", the base button will have a keyboard focus ripple."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "false"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/ButtonBase/ButtonBase.d.ts",
							"line": 51,
							"character": 4,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/ButtonBase/ButtonBase.d.ts#L51"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.focusRipple"
					}
				},
				{
					"id": 294,
					"name": "focusVisibleClassName",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This prop can help identify which element has keyboard focus.\nThe class name will be applied when the element gains the focus through keyboard interaction.\nIt's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\nThe rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).\nA [polyfill can be used](https://github.com/WICG/focus-visible) to apply a "
							},
							{
								"kind": "code",
								"text": "`focus-visible`"
							},
							{
								"kind": "text",
								"text": " class to other components\nif needed."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/ButtonBase/ButtonBase.d.ts",
							"line": 60,
							"character": 4,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/ButtonBase/ButtonBase.d.ts#L60"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.focusVisibleClassName"
					}
				},
				{
					"id": 19,
					"name": "form",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 2078,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.form"
					}
				},
				{
					"id": 39,
					"name": "formAction",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 2079,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.formAction"
					}
				},
				{
					"id": 40,
					"name": "formEncType",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 2080,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.formEncType"
					}
				},
				{
					"id": 41,
					"name": "formMethod",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 2081,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.formMethod"
					}
				},
				{
					"id": 42,
					"name": "formNoValidate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 2082,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.formNoValidate"
					}
				},
				{
					"id": 43,
					"name": "formTarget",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 2083,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.formTarget"
					}
				},
				{
					"id": 18,
					"name": "hidden",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1857,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.hidden"
					}
				},
				{
					"id": 9,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The icon to display when the component is unchecked."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "<RadioButtonIcon />"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/Radio/Radio.d.ts",
							"line": 41,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/Radio/Radio.d.ts#L41"
						}
					],
					"type": {
						"type": "reference",
						"name": "ReactNode",
						"qualifiedName": "React.ReactNode",
						"package": "@types/react"
					}
				},
				{
					"id": 14,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The id of the "
							},
							{
								"kind": "code",
								"text": "`input`"
							},
							{
								"kind": "text",
								"text": " element."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/internal/SwitchBase.d.ts",
							"line": 44,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/internal/SwitchBase.d.ts#L44"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.id"
					}
				},
				{
					"id": 55,
					"name": "inlist",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1877,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.inlist"
					}
				},
				{
					"id": 31,
					"name": "inputMode",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Hints at the type of data that might be entered by the user while editing the element or its contents"
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1903,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "search"
							},
							{
								"type": "literal",
								"value": "numeric"
							},
							{
								"type": "literal",
								"value": "none"
							},
							{
								"type": "literal",
								"value": "url"
							},
							{
								"type": "literal",
								"value": "text"
							},
							{
								"type": "literal",
								"value": "decimal"
							},
							{
								"type": "literal",
								"value": "tel"
							},
							{
								"type": "literal",
								"value": "email"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.inputMode"
					}
				},
				{
					"id": 300,
					"name": "inputProps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the "
							},
							{
								"kind": "code",
								"text": "`input`"
							},
							{
								"kind": "text",
								"text": " element."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/internal/SwitchBase.d.ts",
							"line": 48,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/internal/SwitchBase.d.ts#L48"
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLInputElement",
								"qualifiedName": "HTMLInputElement",
								"package": "typescript"
							}
						],
						"name": "InputHTMLAttributes",
						"qualifiedName": "React.InputHTMLAttributes",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.inputProps"
					}
				},
				{
					"id": 289,
					"name": "inputRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Pass a ref to the "
							},
							{
								"kind": "code",
								"text": "`input`"
							},
							{
								"kind": "text",
								"text": " element."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/internal/SwitchBase.d.ts",
							"line": 52,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/internal/SwitchBase.d.ts#L52"
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Ref",
						"qualifiedName": "React.Ref",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.inputRef"
					}
				},
				{
					"id": 71,
					"name": "is",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Specify that a standard HTML element should behave like a defined custom built-in element"
							}
						],
						"blockTags": [
							{
								"tag": "@see",
								"content": [
									{
										"kind": "text",
										"text": "https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1908,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.is"
					}
				},
				{
					"id": 66,
					"name": "itemID",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1892,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.itemID"
					}
				},
				{
					"id": 63,
					"name": "itemProp",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1889,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.itemProp"
					}
				},
				{
					"id": 67,
					"name": "itemRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1893,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.itemRef"
					}
				},
				{
					"id": 64,
					"name": "itemScope",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1890,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.itemScope"
					}
				},
				{
					"id": 65,
					"name": "itemType",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1891,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.itemType"
					}
				},
				{
					"id": 13,
					"name": "key",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 131,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"name": "Key",
								"qualifiedName": "React.Key",
								"package": "@types/react"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.key"
					}
				},
				{
					"id": 27,
					"name": "lang",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1859,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.lang"
					}
				},
				{
					"id": 15,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Name attribute of the "
							},
							{
								"kind": "code",
								"text": "`input`"
							},
							{
								"kind": "text",
								"text": " element."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/internal/SwitchBase.d.ts",
							"line": 56,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/internal/SwitchBase.d.ts#L56"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.name"
					}
				},
				{
					"id": 166,
					"name": "onAbort",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1431,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onAbort"
					}
				},
				{
					"id": 167,
					"name": "onAbortCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1432,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onAbortCapture"
					}
				},
				{
					"id": 282,
					"name": "onAnimationEnd",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1561,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "AnimationEventHandler",
						"qualifiedName": "React.AnimationEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onAnimationEnd"
					}
				},
				{
					"id": 283,
					"name": "onAnimationEndCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1562,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "AnimationEventHandler",
						"qualifiedName": "React.AnimationEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onAnimationEndCapture"
					}
				},
				{
					"id": 284,
					"name": "onAnimationIteration",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1563,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "AnimationEventHandler",
						"qualifiedName": "React.AnimationEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onAnimationIteration"
					}
				},
				{
					"id": 285,
					"name": "onAnimationIterationCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1564,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "AnimationEventHandler",
						"qualifiedName": "React.AnimationEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onAnimationIterationCapture"
					}
				},
				{
					"id": 280,
					"name": "onAnimationStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1559,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "AnimationEventHandler",
						"qualifiedName": "React.AnimationEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onAnimationStart"
					}
				},
				{
					"id": 281,
					"name": "onAnimationStartCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1560,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "AnimationEventHandler",
						"qualifiedName": "React.AnimationEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onAnimationStartCapture"
					}
				},
				{
					"id": 210,
					"name": "onAuxClick",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1477,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "MouseEventHandler",
						"qualifiedName": "React.MouseEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onAuxClick"
					}
				},
				{
					"id": 211,
					"name": "onAuxClickCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1478,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "MouseEventHandler",
						"qualifiedName": "React.MouseEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onAuxClickCapture"
					}
				},
				{
					"id": 146,
					"name": "onBeforeInput",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1403,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "FormEventHandler",
						"qualifiedName": "React.FormEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onBeforeInput"
					}
				},
				{
					"id": 147,
					"name": "onBeforeInputCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1404,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "FormEventHandler",
						"qualifiedName": "React.FormEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onBeforeInputCapture"
					}
				},
				{
					"id": 138,
					"name": "onBlur",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1397,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "FocusEventHandler",
						"qualifiedName": "React.FocusEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onBlur"
					}
				},
				{
					"id": 139,
					"name": "onBlurCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1398,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "FocusEventHandler",
						"qualifiedName": "React.FocusEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onBlurCapture"
					}
				},
				{
					"id": 168,
					"name": "onCanPlay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1433,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onCanPlay"
					}
				},
				{
					"id": 169,
					"name": "onCanPlayCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1434,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onCanPlayCapture"
					}
				},
				{
					"id": 170,
					"name": "onCanPlayThrough",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1435,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onCanPlayThrough"
					}
				},
				{
					"id": 171,
					"name": "onCanPlayThroughCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1436,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onCanPlayThroughCapture"
					}
				},
				{
					"id": 140,
					"name": "onChange",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/internal/SwitchBase.d.ts",
							"line": 64,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/internal/SwitchBase.d.ts#L64"
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 141,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "packages/mui-material/src/internal/SwitchBase.d.ts",
									"line": 64,
									"character": 13,
									"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/internal/SwitchBase.d.ts#L64"
								}
							],
							"signatures": [
								{
									"id": 142,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Callback fired when the state is changed."
											}
										]
									},
									"parameters": [
										{
											"id": 143,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The event source of the callback.\nYou can pull out the new value by accessing "
													},
													{
														"kind": "code",
														"text": "`event.target.value`"
													},
													{
														"kind": "text",
														"text": " (string).\nYou can pull out the new checked state by accessing "
													},
													{
														"kind": "code",
														"text": "`event.target.checked`"
													},
													{
														"kind": "text",
														"text": " (boolean)."
													}
												]
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "HTMLInputElement",
														"qualifiedName": "HTMLInputElement",
														"package": "typescript"
													}
												],
												"name": "ChangeEvent",
												"qualifiedName": "React.ChangeEvent",
												"package": "@types/react"
											}
										},
										{
											"id": 144,
											"name": "checked",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onChange"
					}
				},
				{
					"id": 145,
					"name": "onChangeCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1402,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "FormEventHandler",
						"qualifiedName": "React.FormEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onChangeCapture"
					}
				},
				{
					"id": 212,
					"name": "onClick",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1479,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "MouseEventHandler",
						"qualifiedName": "React.MouseEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onClick"
					}
				},
				{
					"id": 213,
					"name": "onClickCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1480,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "MouseEventHandler",
						"qualifiedName": "React.MouseEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onClickCapture"
					}
				},
				{
					"id": 130,
					"name": "onCompositionEnd",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1387,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "CompositionEventHandler",
						"qualifiedName": "React.CompositionEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onCompositionEnd"
					}
				},
				{
					"id": 131,
					"name": "onCompositionEndCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1388,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "CompositionEventHandler",
						"qualifiedName": "React.CompositionEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onCompositionEndCapture"
					}
				},
				{
					"id": 132,
					"name": "onCompositionStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1389,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "CompositionEventHandler",
						"qualifiedName": "React.CompositionEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onCompositionStart"
					}
				},
				{
					"id": 133,
					"name": "onCompositionStartCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1390,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "CompositionEventHandler",
						"qualifiedName": "React.CompositionEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onCompositionStartCapture"
					}
				},
				{
					"id": 134,
					"name": "onCompositionUpdate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1391,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "CompositionEventHandler",
						"qualifiedName": "React.CompositionEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onCompositionUpdate"
					}
				},
				{
					"id": 135,
					"name": "onCompositionUpdateCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1392,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "CompositionEventHandler",
						"qualifiedName": "React.CompositionEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onCompositionUpdateCapture"
					}
				},
				{
					"id": 214,
					"name": "onContextMenu",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1481,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "MouseEventHandler",
						"qualifiedName": "React.MouseEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onContextMenu"
					}
				},
				{
					"id": 215,
					"name": "onContextMenuCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1482,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "MouseEventHandler",
						"qualifiedName": "React.MouseEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onContextMenuCapture"
					}
				},
				{
					"id": 124,
					"name": "onCopy",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1379,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ClipboardEventHandler",
						"qualifiedName": "React.ClipboardEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onCopy"
					}
				},
				{
					"id": 125,
					"name": "onCopyCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1380,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ClipboardEventHandler",
						"qualifiedName": "React.ClipboardEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onCopyCapture"
					}
				},
				{
					"id": 126,
					"name": "onCut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1381,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ClipboardEventHandler",
						"qualifiedName": "React.ClipboardEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onCut"
					}
				},
				{
					"id": 127,
					"name": "onCutCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1382,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ClipboardEventHandler",
						"qualifiedName": "React.ClipboardEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onCutCapture"
					}
				},
				{
					"id": 216,
					"name": "onDoubleClick",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1483,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "MouseEventHandler",
						"qualifiedName": "React.MouseEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onDoubleClick"
					}
				},
				{
					"id": 217,
					"name": "onDoubleClickCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1484,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "MouseEventHandler",
						"qualifiedName": "React.MouseEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onDoubleClickCapture"
					}
				},
				{
					"id": 218,
					"name": "onDrag",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1485,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "DragEventHandler",
						"qualifiedName": "React.DragEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onDrag"
					}
				},
				{
					"id": 219,
					"name": "onDragCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1486,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "DragEventHandler",
						"qualifiedName": "React.DragEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onDragCapture"
					}
				},
				{
					"id": 220,
					"name": "onDragEnd",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1487,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "DragEventHandler",
						"qualifiedName": "React.DragEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onDragEnd"
					}
				},
				{
					"id": 221,
					"name": "onDragEndCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1488,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "DragEventHandler",
						"qualifiedName": "React.DragEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onDragEndCapture"
					}
				},
				{
					"id": 222,
					"name": "onDragEnter",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1489,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "DragEventHandler",
						"qualifiedName": "React.DragEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onDragEnter"
					}
				},
				{
					"id": 223,
					"name": "onDragEnterCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1490,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "DragEventHandler",
						"qualifiedName": "React.DragEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onDragEnterCapture"
					}
				},
				{
					"id": 224,
					"name": "onDragExit",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1491,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "DragEventHandler",
						"qualifiedName": "React.DragEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onDragExit"
					}
				},
				{
					"id": 225,
					"name": "onDragExitCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1492,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "DragEventHandler",
						"qualifiedName": "React.DragEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onDragExitCapture"
					}
				},
				{
					"id": 226,
					"name": "onDragLeave",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1493,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "DragEventHandler",
						"qualifiedName": "React.DragEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onDragLeave"
					}
				},
				{
					"id": 227,
					"name": "onDragLeaveCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1494,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "DragEventHandler",
						"qualifiedName": "React.DragEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onDragLeaveCapture"
					}
				},
				{
					"id": 228,
					"name": "onDragOver",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1495,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "DragEventHandler",
						"qualifiedName": "React.DragEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onDragOver"
					}
				},
				{
					"id": 229,
					"name": "onDragOverCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1496,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "DragEventHandler",
						"qualifiedName": "React.DragEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onDragOverCapture"
					}
				},
				{
					"id": 230,
					"name": "onDragStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1497,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "DragEventHandler",
						"qualifiedName": "React.DragEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onDragStart"
					}
				},
				{
					"id": 231,
					"name": "onDragStartCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1498,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "DragEventHandler",
						"qualifiedName": "React.DragEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onDragStartCapture"
					}
				},
				{
					"id": 232,
					"name": "onDrop",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1499,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "DragEventHandler",
						"qualifiedName": "React.DragEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onDrop"
					}
				},
				{
					"id": 233,
					"name": "onDropCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1500,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "DragEventHandler",
						"qualifiedName": "React.DragEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onDropCapture"
					}
				},
				{
					"id": 172,
					"name": "onDurationChange",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1437,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onDurationChange"
					}
				},
				{
					"id": 173,
					"name": "onDurationChangeCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1438,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onDurationChangeCapture"
					}
				},
				{
					"id": 174,
					"name": "onEmptied",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1439,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onEmptied"
					}
				},
				{
					"id": 175,
					"name": "onEmptiedCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1440,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onEmptiedCapture"
					}
				},
				{
					"id": 176,
					"name": "onEncrypted",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1441,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onEncrypted"
					}
				},
				{
					"id": 177,
					"name": "onEncryptedCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1442,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onEncryptedCapture"
					}
				},
				{
					"id": 178,
					"name": "onEnded",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1443,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onEnded"
					}
				},
				{
					"id": 179,
					"name": "onEndedCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1444,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onEndedCapture"
					}
				},
				{
					"id": 158,
					"name": "onError",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1417,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onError"
					}
				},
				{
					"id": 159,
					"name": "onErrorCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1418,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onErrorCapture"
					}
				},
				{
					"id": 136,
					"name": "onFocus",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1395,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "FocusEventHandler",
						"qualifiedName": "React.FocusEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onFocus"
					}
				},
				{
					"id": 137,
					"name": "onFocusCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1396,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "FocusEventHandler",
						"qualifiedName": "React.FocusEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onFocusCapture"
					}
				},
				{
					"id": 288,
					"name": "onFocusVisible",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Callback fired when the component is focused with a keyboard.\nWe trigger a "
							},
							{
								"kind": "code",
								"text": "`onFocus`"
							},
							{
								"kind": "text",
								"text": " callback too."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/ButtonBase/ButtonBase.d.ts",
							"line": 70,
							"character": 4,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/ButtonBase/ButtonBase.d.ts#L70"
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "FocusEventHandler",
						"qualifiedName": "React.FocusEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onFocusVisible"
					}
				},
				{
					"id": 272,
					"name": "onGotPointerCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1545,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "PointerEventHandler",
						"qualifiedName": "React.PointerEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onGotPointerCapture"
					}
				},
				{
					"id": 273,
					"name": "onGotPointerCaptureCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1546,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "PointerEventHandler",
						"qualifiedName": "React.PointerEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onGotPointerCaptureCapture"
					}
				},
				{
					"id": 148,
					"name": "onInput",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1405,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "FormEventHandler",
						"qualifiedName": "React.FormEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onInput"
					}
				},
				{
					"id": 149,
					"name": "onInputCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1406,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "FormEventHandler",
						"qualifiedName": "React.FormEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onInputCapture"
					}
				},
				{
					"id": 154,
					"name": "onInvalid",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1411,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "FormEventHandler",
						"qualifiedName": "React.FormEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onInvalid"
					}
				},
				{
					"id": 155,
					"name": "onInvalidCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1412,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "FormEventHandler",
						"qualifiedName": "React.FormEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onInvalidCapture"
					}
				},
				{
					"id": 160,
					"name": "onKeyDown",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1421,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "KeyboardEventHandler",
						"qualifiedName": "React.KeyboardEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onKeyDown"
					}
				},
				{
					"id": 161,
					"name": "onKeyDownCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1422,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "KeyboardEventHandler",
						"qualifiedName": "React.KeyboardEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onKeyDownCapture"
					}
				},
				{
					"id": 162,
					"name": "onKeyPress",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@deprecated",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1424,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "KeyboardEventHandler",
						"qualifiedName": "React.KeyboardEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onKeyPress"
					}
				},
				{
					"id": 163,
					"name": "onKeyPressCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"comment": {
						"summary": [],
						"blockTags": [
							{
								"tag": "@deprecated",
								"content": []
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1426,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "KeyboardEventHandler",
						"qualifiedName": "React.KeyboardEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onKeyPressCapture"
					}
				},
				{
					"id": 164,
					"name": "onKeyUp",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1427,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "KeyboardEventHandler",
						"qualifiedName": "React.KeyboardEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onKeyUp"
					}
				},
				{
					"id": 165,
					"name": "onKeyUpCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1428,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "KeyboardEventHandler",
						"qualifiedName": "React.KeyboardEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onKeyUpCapture"
					}
				},
				{
					"id": 156,
					"name": "onLoad",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1415,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onLoad"
					}
				},
				{
					"id": 157,
					"name": "onLoadCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1416,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onLoadCapture"
					}
				},
				{
					"id": 184,
					"name": "onLoadStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1449,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onLoadStart"
					}
				},
				{
					"id": 185,
					"name": "onLoadStartCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1450,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onLoadStartCapture"
					}
				},
				{
					"id": 180,
					"name": "onLoadedData",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1445,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onLoadedData"
					}
				},
				{
					"id": 181,
					"name": "onLoadedDataCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1446,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onLoadedDataCapture"
					}
				},
				{
					"id": 182,
					"name": "onLoadedMetadata",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1447,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onLoadedMetadata"
					}
				},
				{
					"id": 183,
					"name": "onLoadedMetadataCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1448,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onLoadedMetadataCapture"
					}
				},
				{
					"id": 274,
					"name": "onLostPointerCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1547,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "PointerEventHandler",
						"qualifiedName": "React.PointerEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onLostPointerCapture"
					}
				},
				{
					"id": 275,
					"name": "onLostPointerCaptureCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1548,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "PointerEventHandler",
						"qualifiedName": "React.PointerEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onLostPointerCaptureCapture"
					}
				},
				{
					"id": 234,
					"name": "onMouseDown",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1501,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "MouseEventHandler",
						"qualifiedName": "React.MouseEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onMouseDown"
					}
				},
				{
					"id": 235,
					"name": "onMouseDownCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1502,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "MouseEventHandler",
						"qualifiedName": "React.MouseEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onMouseDownCapture"
					}
				},
				{
					"id": 236,
					"name": "onMouseEnter",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1503,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "MouseEventHandler",
						"qualifiedName": "React.MouseEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onMouseEnter"
					}
				},
				{
					"id": 237,
					"name": "onMouseLeave",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1504,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "MouseEventHandler",
						"qualifiedName": "React.MouseEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onMouseLeave"
					}
				},
				{
					"id": 238,
					"name": "onMouseMove",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1505,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "MouseEventHandler",
						"qualifiedName": "React.MouseEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onMouseMove"
					}
				},
				{
					"id": 239,
					"name": "onMouseMoveCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1506,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "MouseEventHandler",
						"qualifiedName": "React.MouseEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onMouseMoveCapture"
					}
				},
				{
					"id": 240,
					"name": "onMouseOut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1507,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "MouseEventHandler",
						"qualifiedName": "React.MouseEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onMouseOut"
					}
				},
				{
					"id": 241,
					"name": "onMouseOutCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1508,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "MouseEventHandler",
						"qualifiedName": "React.MouseEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onMouseOutCapture"
					}
				},
				{
					"id": 242,
					"name": "onMouseOver",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1509,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "MouseEventHandler",
						"qualifiedName": "React.MouseEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onMouseOver"
					}
				},
				{
					"id": 243,
					"name": "onMouseOverCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1510,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "MouseEventHandler",
						"qualifiedName": "React.MouseEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onMouseOverCapture"
					}
				},
				{
					"id": 244,
					"name": "onMouseUp",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1511,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "MouseEventHandler",
						"qualifiedName": "React.MouseEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onMouseUp"
					}
				},
				{
					"id": 245,
					"name": "onMouseUpCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1512,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "MouseEventHandler",
						"qualifiedName": "React.MouseEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onMouseUpCapture"
					}
				},
				{
					"id": 128,
					"name": "onPaste",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1383,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ClipboardEventHandler",
						"qualifiedName": "React.ClipboardEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onPaste"
					}
				},
				{
					"id": 129,
					"name": "onPasteCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1384,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ClipboardEventHandler",
						"qualifiedName": "React.ClipboardEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onPasteCapture"
					}
				},
				{
					"id": 186,
					"name": "onPause",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1451,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onPause"
					}
				},
				{
					"id": 187,
					"name": "onPauseCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1452,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onPauseCapture"
					}
				},
				{
					"id": 188,
					"name": "onPlay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1453,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onPlay"
					}
				},
				{
					"id": 189,
					"name": "onPlayCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1454,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onPlayCapture"
					}
				},
				{
					"id": 190,
					"name": "onPlaying",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1455,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onPlaying"
					}
				},
				{
					"id": 191,
					"name": "onPlayingCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1456,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onPlayingCapture"
					}
				},
				{
					"id": 262,
					"name": "onPointerCancel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1535,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "PointerEventHandler",
						"qualifiedName": "React.PointerEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onPointerCancel"
					}
				},
				{
					"id": 263,
					"name": "onPointerCancelCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1536,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "PointerEventHandler",
						"qualifiedName": "React.PointerEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onPointerCancelCapture"
					}
				},
				{
					"id": 256,
					"name": "onPointerDown",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1529,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "PointerEventHandler",
						"qualifiedName": "React.PointerEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onPointerDown"
					}
				},
				{
					"id": 257,
					"name": "onPointerDownCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1530,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "PointerEventHandler",
						"qualifiedName": "React.PointerEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onPointerDownCapture"
					}
				},
				{
					"id": 264,
					"name": "onPointerEnter",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1537,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "PointerEventHandler",
						"qualifiedName": "React.PointerEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onPointerEnter"
					}
				},
				{
					"id": 265,
					"name": "onPointerEnterCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1538,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "PointerEventHandler",
						"qualifiedName": "React.PointerEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onPointerEnterCapture"
					}
				},
				{
					"id": 266,
					"name": "onPointerLeave",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1539,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "PointerEventHandler",
						"qualifiedName": "React.PointerEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onPointerLeave"
					}
				},
				{
					"id": 267,
					"name": "onPointerLeaveCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1540,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "PointerEventHandler",
						"qualifiedName": "React.PointerEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onPointerLeaveCapture"
					}
				},
				{
					"id": 258,
					"name": "onPointerMove",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1531,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "PointerEventHandler",
						"qualifiedName": "React.PointerEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onPointerMove"
					}
				},
				{
					"id": 259,
					"name": "onPointerMoveCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1532,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "PointerEventHandler",
						"qualifiedName": "React.PointerEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onPointerMoveCapture"
					}
				},
				{
					"id": 270,
					"name": "onPointerOut",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1543,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "PointerEventHandler",
						"qualifiedName": "React.PointerEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onPointerOut"
					}
				},
				{
					"id": 271,
					"name": "onPointerOutCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1544,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "PointerEventHandler",
						"qualifiedName": "React.PointerEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onPointerOutCapture"
					}
				},
				{
					"id": 268,
					"name": "onPointerOver",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1541,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "PointerEventHandler",
						"qualifiedName": "React.PointerEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onPointerOver"
					}
				},
				{
					"id": 269,
					"name": "onPointerOverCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1542,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "PointerEventHandler",
						"qualifiedName": "React.PointerEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onPointerOverCapture"
					}
				},
				{
					"id": 260,
					"name": "onPointerUp",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1533,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "PointerEventHandler",
						"qualifiedName": "React.PointerEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onPointerUp"
					}
				},
				{
					"id": 261,
					"name": "onPointerUpCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1534,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "PointerEventHandler",
						"qualifiedName": "React.PointerEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onPointerUpCapture"
					}
				},
				{
					"id": 192,
					"name": "onProgress",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1457,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onProgress"
					}
				},
				{
					"id": 193,
					"name": "onProgressCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1458,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onProgressCapture"
					}
				},
				{
					"id": 194,
					"name": "onRateChange",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1459,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onRateChange"
					}
				},
				{
					"id": 195,
					"name": "onRateChangeCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1460,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onRateChangeCapture"
					}
				},
				{
					"id": 150,
					"name": "onReset",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1407,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "FormEventHandler",
						"qualifiedName": "React.FormEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onReset"
					}
				},
				{
					"id": 151,
					"name": "onResetCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1408,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "FormEventHandler",
						"qualifiedName": "React.FormEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onResetCapture"
					}
				},
				{
					"id": 276,
					"name": "onScroll",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1551,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "UIEventHandler",
						"qualifiedName": "React.UIEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onScroll"
					}
				},
				{
					"id": 277,
					"name": "onScrollCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1552,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "UIEventHandler",
						"qualifiedName": "React.UIEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onScrollCapture"
					}
				},
				{
					"id": 196,
					"name": "onSeeked",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1461,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onSeeked"
					}
				},
				{
					"id": 197,
					"name": "onSeekedCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1462,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onSeekedCapture"
					}
				},
				{
					"id": 198,
					"name": "onSeeking",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1463,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onSeeking"
					}
				},
				{
					"id": 199,
					"name": "onSeekingCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1464,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onSeekingCapture"
					}
				},
				{
					"id": 246,
					"name": "onSelect",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1515,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onSelect"
					}
				},
				{
					"id": 247,
					"name": "onSelectCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1516,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onSelectCapture"
					}
				},
				{
					"id": 200,
					"name": "onStalled",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1465,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onStalled"
					}
				},
				{
					"id": 201,
					"name": "onStalledCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1466,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onStalledCapture"
					}
				},
				{
					"id": 152,
					"name": "onSubmit",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1409,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "FormEventHandler",
						"qualifiedName": "React.FormEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onSubmit"
					}
				},
				{
					"id": 153,
					"name": "onSubmitCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1410,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "FormEventHandler",
						"qualifiedName": "React.FormEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onSubmitCapture"
					}
				},
				{
					"id": 202,
					"name": "onSuspend",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1467,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onSuspend"
					}
				},
				{
					"id": 203,
					"name": "onSuspendCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1468,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onSuspendCapture"
					}
				},
				{
					"id": 204,
					"name": "onTimeUpdate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1469,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onTimeUpdate"
					}
				},
				{
					"id": 205,
					"name": "onTimeUpdateCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1470,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onTimeUpdateCapture"
					}
				},
				{
					"id": 248,
					"name": "onTouchCancel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1519,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "TouchEventHandler",
						"qualifiedName": "React.TouchEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onTouchCancel"
					}
				},
				{
					"id": 249,
					"name": "onTouchCancelCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1520,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "TouchEventHandler",
						"qualifiedName": "React.TouchEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onTouchCancelCapture"
					}
				},
				{
					"id": 250,
					"name": "onTouchEnd",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1521,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "TouchEventHandler",
						"qualifiedName": "React.TouchEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onTouchEnd"
					}
				},
				{
					"id": 251,
					"name": "onTouchEndCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1522,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "TouchEventHandler",
						"qualifiedName": "React.TouchEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onTouchEndCapture"
					}
				},
				{
					"id": 252,
					"name": "onTouchMove",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1523,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "TouchEventHandler",
						"qualifiedName": "React.TouchEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onTouchMove"
					}
				},
				{
					"id": 253,
					"name": "onTouchMoveCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1524,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "TouchEventHandler",
						"qualifiedName": "React.TouchEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onTouchMoveCapture"
					}
				},
				{
					"id": 254,
					"name": "onTouchStart",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1525,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "TouchEventHandler",
						"qualifiedName": "React.TouchEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onTouchStart"
					}
				},
				{
					"id": 255,
					"name": "onTouchStartCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1526,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "TouchEventHandler",
						"qualifiedName": "React.TouchEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onTouchStartCapture"
					}
				},
				{
					"id": 286,
					"name": "onTransitionEnd",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1567,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "TransitionEventHandler",
						"qualifiedName": "React.TransitionEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onTransitionEnd"
					}
				},
				{
					"id": 287,
					"name": "onTransitionEndCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1568,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "TransitionEventHandler",
						"qualifiedName": "React.TransitionEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onTransitionEndCapture"
					}
				},
				{
					"id": 206,
					"name": "onVolumeChange",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1471,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onVolumeChange"
					}
				},
				{
					"id": 207,
					"name": "onVolumeChangeCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1472,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onVolumeChangeCapture"
					}
				},
				{
					"id": 208,
					"name": "onWaiting",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1473,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onWaiting"
					}
				},
				{
					"id": 209,
					"name": "onWaitingCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1474,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "ReactEventHandler",
						"qualifiedName": "React.ReactEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onWaitingCapture"
					}
				},
				{
					"id": 278,
					"name": "onWheel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1555,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "WheelEventHandler",
						"qualifiedName": "React.WheelEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onWheel"
					}
				},
				{
					"id": 279,
					"name": "onWheelCapture",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1556,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLButtonElement",
								"qualifiedName": "HTMLButtonElement",
								"package": "typescript"
							}
						],
						"name": "WheelEventHandler",
						"qualifiedName": "React.WheelEventHandler",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.onWheelCapture"
					}
				},
				{
					"id": 49,
					"name": "placeholder",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1860,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.placeholder"
					}
				},
				{
					"id": 29,
					"name": "prefix",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1878,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.prefix"
					}
				},
				{
					"id": 56,
					"name": "property",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1879,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.property"
					}
				},
				{
					"id": 51,
					"name": "radioGroup",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1869,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.radioGroup"
					}
				},
				{
					"id": 120,
					"name": "readOnly",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/internal/SwitchBase.d.ts",
							"line": 65,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/internal/SwitchBase.d.ts#L65"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.readOnly"
					}
				},
				{
					"id": 33,
					"name": "ref",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 794,
							"character": 45
						},
						{
							"fileName": "packages/mui-material/src/index.d.ts",
							"line": 38,
							"character": 4,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/index.d.ts#L38"
						},
						{
							"fileName": "packages/mui-material/src/index.d.ts",
							"line": 38,
							"character": 4,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/index.d.ts#L38"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 34,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "node_modules/@types/react/index.d.ts",
											"line": 85,
											"character": 28
										}
									],
									"signatures": [
										{
											"id": 35,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 36,
													"name": "instance",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": null
															},
															{
																"type": "reference",
																"name": "HTMLButtonElement",
																"qualifiedName": "HTMLButtonElement",
																"package": "typescript"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLButtonElement",
										"qualifiedName": "HTMLButtonElement",
										"package": "typescript"
									}
								],
								"name": "RefObject",
								"qualifiedName": "React.RefObject",
								"package": "@types/react"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.ref"
					}
				},
				{
					"id": 12,
					"name": "required",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "If "
							},
							{
								"kind": "code",
								"text": "`true`"
							},
							{
								"kind": "text",
								"text": ", the "
							},
							{
								"kind": "code",
								"text": "`input`"
							},
							{
								"kind": "text",
								"text": " element is required."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/internal/SwitchBase.d.ts",
							"line": 69,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/internal/SwitchBase.d.ts#L69"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.required"
					}
				},
				{
					"id": 57,
					"name": "resource",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1880,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.resource"
					}
				},
				{
					"id": 68,
					"name": "results",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1894,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.results"
					}
				},
				{
					"id": 52,
					"name": "role",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1872,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "AriaRole",
						"qualifiedName": "React.AriaRole",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.role"
					}
				},
				{
					"id": 69,
					"name": "security",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1895,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.security"
					}
				},
				{
					"id": 10,
					"name": "size",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The size of the component.\n"
							},
							{
								"kind": "code",
								"text": "`small`"
							},
							{
								"kind": "text",
								"text": " is equivalent to the dense radio styling."
							}
						],
						"blockTags": [
							{
								"tag": "@default",
								"content": [
									{
										"kind": "text",
										"text": "'medium'"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/Radio/Radio.d.ts",
							"line": 47,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/Radio/Radio.d.ts#L47"
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "small"
							},
							{
								"type": "literal",
								"value": "medium"
							}
						]
					}
				},
				{
					"id": 20,
					"name": "slot",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1861,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.slot"
					}
				},
				{
					"id": 50,
					"name": "spellCheck",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1862,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "Booleanish",
						"qualifiedName": "Booleanish",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.spellCheck"
					}
				},
				{
					"id": 21,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/OverridableComponent.d.ts",
							"line": 61,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/OverridableComponent.d.ts#L61"
						},
						{
							"fileName": "packages/mui-material/src/index.d.ts",
							"line": 41,
							"character": 4,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/index.d.ts#L41"
						},
						{
							"fileName": "packages/mui-material/src/index.d.ts",
							"line": 41,
							"character": 4,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/index.d.ts#L41"
						}
					],
					"type": {
						"type": "reference",
						"name": "CSSProperties",
						"qualifiedName": "React.CSSProperties",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.style"
					}
				},
				{
					"id": 46,
					"name": "suppressContentEditableWarning",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1847,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.suppressContentEditableWarning"
					}
				},
				{
					"id": 47,
					"name": "suppressHydrationWarning",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1848,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.suppressHydrationWarning"
					}
				},
				{
					"id": 11,
					"name": "sx",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The system prop that allows defining system overrides as well as additional CSS styles."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/Radio/Radio.d.ts",
							"line": 51,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/Radio/Radio.d.ts#L51"
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "Theme"
							}
						],
						"name": "SxProps"
					},
					"overwrites": {
						"type": "reference",
						"name": "StandardProps.sx"
					}
				},
				{
					"id": 32,
					"name": "tabIndex",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/internal/SwitchBase.d.ts",
							"line": 70,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/internal/SwitchBase.d.ts#L70"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.tabIndex"
					}
				},
				{
					"id": 22,
					"name": "title",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1865,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.title"
					}
				},
				{
					"id": 297,
					"name": "touchRippleRef",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "A ref that points to the "
							},
							{
								"kind": "code",
								"text": "`TouchRipple`"
							},
							{
								"kind": "text",
								"text": " element."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/ButtonBase/ButtonBase.d.ts",
							"line": 86,
							"character": 4,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/ButtonBase/ButtonBase.d.ts#L86"
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "TouchRippleActions"
							}
						],
						"name": "Ref",
						"qualifiedName": "React.Ref",
						"package": "@types/react"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.touchRippleRef"
					}
				},
				{
					"id": 16,
					"name": "translate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1866,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "yes"
							},
							{
								"type": "literal",
								"value": "no"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.translate"
					}
				},
				{
					"id": 58,
					"name": "typeof",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1881,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.typeof"
					}
				},
				{
					"id": 70,
					"name": "unselectable",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1896,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "on"
							},
							{
								"type": "literal",
								"value": "off"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.unselectable"
					}
				},
				{
					"id": 17,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The value of the component. The DOM API casts this to a string."
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/mui-material/src/internal/SwitchBase.d.ts",
							"line": 75,
							"character": 2,
							"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/internal/SwitchBase.d.ts#L75"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "unknown"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.value"
					}
				},
				{
					"id": 59,
					"name": "vocab",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 1882,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "StandardProps.vocab"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"children": [
						295,
						296,
						53,
						25,
						24,
						72,
						73,
						74,
						75,
						76,
						77,
						78,
						79,
						80,
						81,
						82,
						83,
						84,
						85,
						86,
						87,
						88,
						89,
						90,
						91,
						92,
						93,
						94,
						95,
						96,
						97,
						98,
						99,
						100,
						101,
						102,
						103,
						104,
						105,
						106,
						107,
						108,
						109,
						110,
						111,
						112,
						113,
						114,
						115,
						116,
						117,
						118,
						119,
						60,
						61,
						37,
						62,
						290,
						38,
						5,
						28,
						6,
						7,
						30,
						48,
						121,
						54,
						44,
						45,
						23,
						298,
						291,
						292,
						8,
						26,
						299,
						293,
						294,
						19,
						39,
						40,
						41,
						42,
						43,
						18,
						9,
						14,
						55,
						31,
						300,
						289,
						71,
						66,
						63,
						67,
						64,
						65,
						13,
						27,
						15,
						166,
						167,
						282,
						283,
						284,
						285,
						280,
						281,
						210,
						211,
						146,
						147,
						138,
						139,
						168,
						169,
						170,
						171,
						140,
						145,
						212,
						213,
						130,
						131,
						132,
						133,
						134,
						135,
						214,
						215,
						124,
						125,
						126,
						127,
						216,
						217,
						218,
						219,
						220,
						221,
						222,
						223,
						224,
						225,
						226,
						227,
						228,
						229,
						230,
						231,
						232,
						233,
						172,
						173,
						174,
						175,
						176,
						177,
						178,
						179,
						158,
						159,
						136,
						137,
						288,
						272,
						273,
						148,
						149,
						154,
						155,
						160,
						161,
						162,
						163,
						164,
						165,
						156,
						157,
						184,
						185,
						180,
						181,
						182,
						183,
						274,
						275,
						234,
						235,
						236,
						237,
						238,
						239,
						240,
						241,
						242,
						243,
						244,
						245,
						128,
						129,
						186,
						187,
						188,
						189,
						190,
						191,
						262,
						263,
						256,
						257,
						264,
						265,
						266,
						267,
						258,
						259,
						270,
						271,
						268,
						269,
						260,
						261,
						192,
						193,
						194,
						195,
						150,
						151,
						276,
						277,
						196,
						197,
						198,
						199,
						246,
						247,
						200,
						201,
						152,
						153,
						202,
						203,
						204,
						205,
						248,
						249,
						250,
						251,
						252,
						253,
						254,
						255,
						286,
						287,
						206,
						207,
						208,
						209,
						278,
						279,
						49,
						29,
						56,
						51,
						120,
						33,
						12,
						57,
						68,
						52,
						69,
						10,
						20,
						50,
						21,
						46,
						47,
						11,
						32,
						22,
						297,
						16,
						58,
						70,
						17,
						59
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/mui-material/src/Radio/Radio.d.ts",
					"line": 12,
					"character": 17,
					"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/Radio/Radio.d.ts#L12"
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "SwitchBaseProps"
						},
						{
							"type": "union",
							"types": [
								{
									"type": "literal",
									"value": "checkedIcon"
								},
								{
									"type": "literal",
									"value": "color"
								},
								{
									"type": "literal",
									"value": "icon"
								},
								{
									"type": "literal",
									"value": "type"
								}
							]
						}
					],
					"name": "InternalStandardProps"
				}
			]
		},
		{
			"id": 3,
			"name": "RadioPropsColorOverrides",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/mui-material/src/Radio/Radio.d.ts",
					"line": 10,
					"character": 17,
					"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/Radio/Radio.d.ts#L10"
				}
			]
		},
		{
			"id": 2,
			"name": "RadioPropsSizeOverrides",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/mui-material/src/Radio/Radio.d.ts",
					"line": 8,
					"character": 17,
					"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/Radio/Radio.d.ts#L8"
				}
			]
		},
		{
			"id": 310,
			"name": "RadioClassKey",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/mui-material/src/Radio/radioClasses.ts",
					"line": 16,
					"character": 12,
					"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/Radio/radioClasses.ts#L16"
				}
			],
			"type": {
				"type": "typeOperator",
				"operator": "keyof",
				"target": {
					"type": "reference",
					"id": 304,
					"name": "RadioClasses"
				}
			}
		},
		{
			"id": 1,
			"name": "radioClasses",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/mui-material/src/Radio/radioClasses.ts",
					"line": 22,
					"character": 6,
					"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/Radio/radioClasses.ts#L22"
				}
			],
			"type": {
				"type": "reference",
				"id": 304,
				"name": "RadioClasses"
			},
			"defaultValue": "..."
		},
		{
			"id": 311,
			"name": "default",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/mui-material/src/Radio/Radio.d.ts",
					"line": 65,
					"character": 24,
					"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/Radio/Radio.d.ts#L65"
				}
			],
			"signatures": [
				{
					"id": 312,
					"name": "default",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Demos:\n\n- [Radio button](https://mui.com/material-ui/react-radio-button/)\n\nAPI:\n\n- [Radio API](https://mui.com/material-ui/api/radio/)\n- inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)"
							}
						]
					},
					"parameters": [
						{
							"id": 313,
							"name": "props",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 4,
								"name": "RadioProps"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "JSX.Element",
						"qualifiedName": "global.JSX.Element",
						"package": "@types/react"
					}
				}
			]
		},
		{
			"id": 301,
			"name": "getRadioUtilityClass",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/mui-material/src/Radio/radioClasses.ts",
					"line": 18,
					"character": 16,
					"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/Radio/radioClasses.ts#L18"
				}
			],
			"signatures": [
				{
					"id": 302,
					"name": "getRadioUtilityClass",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 303,
							"name": "slot",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		}
	],
	"groups": [
		{
			"title": "Interfaces",
			"children": [
				304,
				4,
				3,
				2
			]
		},
		{
			"title": "Type Aliases",
			"children": [
				310
			]
		},
		{
			"title": "Variables",
			"children": [
				1
			]
		},
		{
			"title": "Functions",
			"children": [
				311,
				301
			]
		}
	],
	"sources": [
		{
			"fileName": "packages/mui-material/src/Radio/index.d.ts",
			"line": 1,
			"character": 0,
			"url": "https://github.com/mui/material-ui/blob/002ab79b77/packages/mui-material/src/Radio/index.d.ts#L1"
		}
	]
}